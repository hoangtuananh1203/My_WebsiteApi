// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_WebsiteApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace My_WebsiteApi.Migrations
{
    [DbContext(typeof(MyDbcontext))]
    [Migration("20250107092034_Addneweb_V2")]
    partial class Addneweb_V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("My_WebsiteApi.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirtName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Ngay_sinh")
                        .HasColumnType("date");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("diachi")
                        .HasColumnType("text");

                    b.Property<string>("sdt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("My_WebsiteApi.Data.BannerIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("bannerIndex");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Bannerthree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("mota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("bannerthrees");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Danhgia_sp", b =>
                {
                    b.Property<int>("Id_danhgia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_danhgia"));

                    b.Property<int>("Diem")
                        .HasColumnType("integer");

                    b.Property<int>("Id_sanpham")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Ngay_add")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("noidung")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id_danhgia");

                    b.HasIndex("Id_sanpham");

                    b.HasIndex("UserId");

                    b.ToTable("danhgia_Sps");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Danhmuc", b =>
                {
                    b.Property<int>("Id_danhmuc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_danhmuc"));

                    b.Property<string>("Mota_danhmuc")
                        .HasColumnType("text");

                    b.Property<string>("Ten_danhmuc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id_danhmuc");

                    b.ToTable("danhmucs");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Danhsach_love", b =>
                {
                    b.Property<int>("Id_dslove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_dslove"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id_dslove");

                    b.HasIndex("UserId");

                    b.ToTable("danhsach_Loves");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Donhang", b =>
                {
                    b.Property<int>("Id_donhang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_donhang"));

                    b.Property<string>("Diachi")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("Ngay_dat")
                        .HasColumnType("date");

                    b.Property<string>("Nguoinhan")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sdt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("trangthai")
                        .HasColumnType("integer");

                    b.Property<int>("type_thanhtoan")
                        .HasColumnType("integer");

                    b.HasKey("Id_donhang");

                    b.HasIndex("UserId");

                    b.ToTable("donhangs");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Giohang", b =>
                {
                    b.Property<int>("Id_giohang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_giohang"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id_giohang");

                    b.HasIndex("UserId");

                    b.ToTable("giohang");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Hangsx", b =>
                {
                    b.Property<int>("Id_hangsx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_hangsx"));

                    b.Property<string>("Diachi_hangsx")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Mota_hangsx")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Ten_hangsx")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id_hangsx");

                    b.ToTable("hangsxes");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Item_donhang", b =>
                {
                    b.Property<int>("Id_itemdonhang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_itemdonhang"));

                    b.Property<int>("Id_donhang")
                        .HasColumnType("integer");

                    b.Property<int>("Id_sanpham")
                        .HasColumnType("integer");

                    b.Property<decimal>("gia")
                        .HasColumnType("numeric");

                    b.Property<int>("soluong")
                        .HasColumnType("integer");

                    b.HasKey("Id_itemdonhang");

                    b.HasIndex("Id_donhang");

                    b.HasIndex("Id_sanpham");

                    b.ToTable("Item_Donhangs");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Item_dsLove", b =>
                {
                    b.Property<int>("Id_item_dslove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_item_dslove"));

                    b.Property<int>("Id_dslove")
                        .HasColumnType("integer");

                    b.Property<int>("Id_sanpham")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Ngay_add")
                        .HasColumnType("date");

                    b.HasKey("Id_item_dslove");

                    b.HasIndex("Id_dslove");

                    b.HasIndex("Id_sanpham");

                    b.ToTable("item_DsLoves");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Item_giohang", b =>
                {
                    b.Property<int>("Id_itemgiohang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_itemgiohang"));

                    b.Property<int>("Id_giohang")
                        .HasColumnType("integer");

                    b.Property<int>("Id_sanpham")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Ngay_add")
                        .HasColumnType("date");

                    b.Property<int>("soluong")
                        .HasColumnType("integer");

                    b.HasKey("Id_itemgiohang");

                    b.HasIndex("Id_giohang");

                    b.HasIndex("Id_sanpham");

                    b.ToTable("item_Giohangs");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Lichsumuahang", b =>
                {
                    b.Property<int>("Id_lichsu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_lichsu"));

                    b.Property<int>("Id_donhang")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Ngaynhan")
                        .HasColumnType("date");

                    b.Property<int>("trangthai")
                        .HasColumnType("integer");

                    b.HasKey("Id_lichsu");

                    b.HasIndex("Id_donhang");

                    b.ToTable("lichsumuahangs");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.LienHe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("ngaythem")
                        .HasColumnType("date");

                    b.Property<string>("noidung")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("sdt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("lienHes");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Sanpham", b =>
                {
                    b.Property<int>("Id_sanpham")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_sanpham"));

                    b.Property<int>("Id_danhmuc")
                        .HasColumnType("integer");

                    b.Property<int>("Id_hangsx")
                        .HasColumnType("integer");

                    b.Property<string>("Loai")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Mausac")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name_sanpham")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Ngay_add")
                        .HasColumnType("date");

                    b.Property<DateTime>("Ngay_update")
                        .HasColumnType("date");

                    b.Property<decimal>("gia")
                        .HasColumnType("numeric");

                    b.Property<string>("image1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("image2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("mota_sp")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("soluong")
                        .HasColumnType("integer");

                    b.HasKey("Id_sanpham");

                    b.HasIndex("Id_danhmuc");

                    b.HasIndex("Id_hangsx");

                    b.ToTable("sanphams");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.SanphamQuangba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("mota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("sanphamQuangbas");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Tintuc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Tieude")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ngaythem")
                        .HasColumnType("date");

                    b.Property<string>("noidung")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("tintucs");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Website_infomation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("diachi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sdt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tencongty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("website_Infomations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Danhgia_sp", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.Sanpham", "masp")
                        .WithMany()
                        .HasForeignKey("Id_sanpham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("masp");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Danhsach_love", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Donhang", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Giohang", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Item_donhang", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.Donhang", "madonhang")
                        .WithMany()
                        .HasForeignKey("Id_donhang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_WebsiteApi.Data.Sanpham", "masp")
                        .WithMany()
                        .HasForeignKey("Id_sanpham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("madonhang");

                    b.Navigation("masp");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Item_dsLove", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.Danhsach_love", "madanhsach")
                        .WithMany()
                        .HasForeignKey("Id_dslove")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_WebsiteApi.Data.Sanpham", "masp")
                        .WithMany()
                        .HasForeignKey("Id_sanpham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("madanhsach");

                    b.Navigation("masp");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Item_giohang", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.Giohang", "magiohang")
                        .WithMany()
                        .HasForeignKey("Id_giohang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_WebsiteApi.Data.Sanpham", "masp")
                        .WithMany()
                        .HasForeignKey("Id_sanpham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("magiohang");

                    b.Navigation("masp");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Lichsumuahang", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.Donhang", "madonhang")
                        .WithMany()
                        .HasForeignKey("Id_donhang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("madonhang");
                });

            modelBuilder.Entity("My_WebsiteApi.Data.Sanpham", b =>
                {
                    b.HasOne("My_WebsiteApi.Data.Danhmuc", "madanhmuc")
                        .WithMany()
                        .HasForeignKey("Id_danhmuc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_WebsiteApi.Data.Hangsx", "mahang")
                        .WithMany()
                        .HasForeignKey("Id_hangsx")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("madanhmuc");

                    b.Navigation("mahang");
                });
#pragma warning restore 612, 618
        }
    }
}
